

redis RDB(relation database)持久化

在操作的过程中，我关闭了RDB的LZF压缩，同时关闭了checksum校验

在redis.conf中的配置如下:
    rdbcompression no
    rdbchecksum no


当数据库中只有key:msg, value:hello的时候。执行save, 得到的rdb dump文件打开结果如下：

$ od -cx dump.lmj.rdb
0000000    R   E   D   I   S   0   0   0   6 376  \0  \0 003   m   s   g
             4552    4944    3053    3030    fe36    0000    6d03    6773
0000020  005   h   e   l   l   o 377  \0  \0  \0  \0  \0  \0  \0  \0
             6805    6c65    6f6c    00ff    0000    0000    0000    0000
0000037

其中16进制是小端存储的，所以是反的。R对应的十六进制ASCII码是:52, E对应的是45, 所以其实应该是RE=>5245

第1~5个字节， 45 52 49 44 53 文件中前5个字节是REDIS, 这个是文件头。能够标明这个是REDIS RDB文件

第6~9个字节 30 30 30 36 ==> 0006，标明了redis rdb存储格式的版本号。

第10个字节~ fe ==> 是十进制的254，被redis 定义成了selectDB。 但是在golang里面读取一个字节，读取到的结果却是EF。不过现在好了，现在读取到的是FE了。

第11个字节是 00(长度字节) ==> 这里展开写成 00000000:
    从流中读取一个字节，最高 2 bit 被读取。
        如果开始 bit 是 00，接下来 6 bit 表示长度。
        如果开始 bit 是 01，再读取额外一个字节。剩下的6bit 加上下个字节的8bit 组成的14 bit 表示长度。
        如果开始 bit 是 10，那么剩余的 6bit 丢弃，从流中读取额外的 4 字节，这 4 个字节表示长度。
        如果开始 bit 是 11，那么接下来的对象是以特殊格式编码的。剩余 6 bit 指示格式。这种编码通常用于把数字作为字符串存储或存储编码后的字符串。
所以最高位是00， 剩下的6个bit是000000，表示数据库是0号数据库。

第12个字节是 00 ==> 这是个ValueType，00表示是字符串对象。
        TypeString        ValueType = 0
        TypeList          ValueType = 1
        TypeSet           ValueType = 2
        TypeZSet          ValueType = 3
        TypeHash          ValueType = 4

        TypeHashZipmap    ValueType = 9
        TypeListZiplist   ValueType = 10
        TypeSetIntset     ValueType = 11
        TypeZSetZiplist   ValueType = 12
        TypeHashZiplist   ValueType = 13
        TypeListQuicklist ValueType = 14
    知道将要读取的对象是字符串了，那么就进行两次readString操作。readString的时候，先读取长度字节，再读取值。

第13个字节是 03 ==> 是长度字节。和上面的读取规则一样。头两位是00，后面是000011，说明字符串长度是3个字节。

第14~16个，读取3个字节组成字符串 msg 这个是key

第17个字节 ===> 长度字节，同理读取5个字节

第18~22个字节，读取5个字节组成字符串 hello 这个是value

第23个字节 FF ===> 表明已经到文件结尾了。

第24~31个 最后的八个字节是文件的checksum



遇到的问题：

在大端、小端存储的问题上被搞晕了。搞一个源码看看人家是怎么处理的。reference: go get github.com/cupcake/rdb
人家读出来的确实是254，我读出来的确实是239。其实就是FE和EF的差别。
现在我读取出来的也是好的了。真是奇怪啊。
